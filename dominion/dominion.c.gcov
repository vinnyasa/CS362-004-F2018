        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:
function compare called 3 returned 100% blocks executed 100%
        3:    9:int compare(const void* a, const void* b) {
        3:   10:  if (*(int*)a > *(int*)b)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   11:    return 1;
        2:   12:  if (*(int*)a < *(int*)b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   13:    return -1;
        1:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:  //set up random number generator
    #####:   45:  SelectStream(1);
call    0 never executed
    #####:   46:  PutSeed((long)randomSeed);
call    0 never executed
        -:   47:
        -:   48:  //check number of players
    #####:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
    #####:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
    #####:   58:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   59:    {
    #####:   60:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   61:        {
    #####:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
    #####:   74:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   75:    {
    #####:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
    #####:   88:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   89:    {
    #####:   90:      state->supplyCount[estate] = 8;
    #####:   91:      state->supplyCount[duchy] = 8;
    #####:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
    #####:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  103:  state->supplyCount[silver] = 40;
    #####:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
    #####:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  108:    {
    #####:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  110:	{
    #####:  111:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
    #####:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  115:		{
    #####:  116:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  117:		    state->supplyCount[i] = 8;
        -:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
    #####:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
    #####:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
    #####:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
    #####:  139:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  140:    {
    #####:  141:      state->deckCount[i] = 0;
    #####:  142:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  143:	{
    #####:  144:	  state->deck[i][j] = estate;
    #####:  145:	  state->deckCount[i]++;
        -:  146:	}
    #####:  147:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  148:	{
    #####:  149:	  state->deck[i][j] = copper;
    #####:  150:	  state->deckCount[i]++;
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
    #####:  155:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  156:    {
    #####:  157:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
    #####:  164:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  165:    {
        -:  166:      //initialize hand size to zero
    #####:  167:      state->handCount[i] = 0;
    #####:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:
        -:  176:  //set embargo tokens to 0 for all supply piles
    #####:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  178:    {
    #####:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
    #####:  183:  state->outpostPlayed = 0;
    #####:  184:  state->phase = 0;
    #####:  185:  state->numActions = 1;
    #####:  186:  state->numBuys = 1;
    #####:  187:  state->playedCardCount = 0;
    #####:  188:  state->whoseTurn = 0;
    #####:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  193:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  194:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  195:  }
        -:  196:
    #####:  197:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  198:
    #####:  199:  return 0;
        -:  200:}
        -:  201:
function shuffle called 0 returned 0% blocks executed 0%
    #####:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
    #####:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
    #####:  210:  if (state->deckCount[player] < 1)
branch  0 never executed
branch  1 never executed
    #####:  211:    return -1;
    #####:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 never executed
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    #####:  215:  while (state->deckCount[player] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  216:    card = floor(Random() * state->deckCount[player]);
call    0 never executed
    #####:  217:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  218:    newDeckPos++;
    #####:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
    #####:  222:    state->deckCount[player]--;
        -:  223:  }
    #####:  224:  for (i = 0; i < newDeckPos; i++) {
branch  0 never executed
branch  1 never executed
    #####:  225:    state->deck[player][i] = newDeck[i];
    #####:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
    #####:  229:  return 0;
        -:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:{
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
call    0 never executed
        -:  251:
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  269:
    #####:  270:  return 0;
        -:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  299:
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:
    #####:  309:  return 0;
        -:  310:}
        -:  311:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  314:}
        -:  315:
function handCard called 0 returned 0% blocks executed 0%
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 4 returned 100% blocks executed 100%
        4:  321:int supplyCount(int card, struct gameState *state) {
        4:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  347:int whoseTurn(struct gameState *state) {
        4:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  355:
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 14 returned 100% blocks executed 38%
       14:  527:int drawCard(int player, struct gameState *state)
        -:  528:{
        -:  529:	int count;
        -:  530:  int deckCounter;
       14:  531:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  532:
        -:  533:    //Step 1 Shuffle the discard pile back into a deck
        -:  534:    int i;
        -:  535:    //Move discard to deck
    #####:  536:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  537:      state->deck[player][i] = state->discard[player][i];
    #####:  538:      state->discard[player][i] = -1;
        -:  539:    }
        -:  540:
    #####:  541:    state->deckCount[player] = state->discardCount[player];
    #####:  542:    state->discardCount[player] = 0;//Reset discard
        -:  543:
        -:  544:    //Shufffle the deck
    #####:  545:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  546:
        -:  547:    if (DEBUG){//Debug statements
        -:  548:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  549:    }
        -:  550:
    #####:  551:    state->discardCount[player] = 0;
        -:  552:
        -:  553:    //Step 2 Draw Card
    #####:  554:    count = state->handCount[player];//Get current player's hand count
        -:  555:
        -:  556:    if (DEBUG){//Debug statements
        -:  557:      printf("Current hand count: %d\n", count);
        -:  558:    }
        -:  559:
    #####:  560:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  561:
    #####:  562:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  563:      return -1;
        -:  564:
    #####:  565:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  566:    state->deckCount[player]--;
    #####:  567:    state->handCount[player]++;//Increment hand count
        -:  568:  }
        -:  569:
        -:  570:  else{
       14:  571:    int count = state->handCount[player];//Get current hand count for player
        -:  572:    int deckCounter;
        -:  573:    if (DEBUG){//Debug statements
        -:  574:      printf("Current hand count: %d\n", count);
        -:  575:    }
        -:  576:
       14:  577:    deckCounter = state->deckCount[player];//Create holder for the deck count
       14:  578:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       14:  579:    state->deckCount[player]--;
       14:  580:    state->handCount[player]++;//Increment hand count
        -:  581:  }
        -:  582:
       14:  583:  return 0;
        -:  584:}
        -:  585:
function getCost called 60 returned 100% blocks executed 100%
       60:  586:int getCost(int cardNumber)
        -:  587:{
       60:  588:  switch( cardNumber )
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 7%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  589:    {
        -:  590:    case curse:
        2:  591:      return 0;
        -:  592:    case estate:
        2:  593:      return 2;
        -:  594:    case duchy:
        2:  595:      return 5;
        -:  596:    case province:
        2:  597:      return 8;
        -:  598:    case copper:
        2:  599:      return 0;
        -:  600:    case silver:
        2:  601:      return 3;
        -:  602:    case gold:
        4:  603:      return 6;
        -:  604:    case adventurer:
        2:  605:      return 6;
        -:  606:    case council_room:
        2:  607:      return 5;
        -:  608:    case feast:
        2:  609:      return 4;
        -:  610:    case gardens:
        2:  611:      return 4;
        -:  612:    case mine:
        2:  613:      return 5;
        -:  614:    case remodel:
        2:  615:      return 4;
        -:  616:    case smithy:
        2:  617:      return 4;
        -:  618:    case village:
        2:  619:      return 3;
        -:  620:    case baron:
        2:  621:      return 4;
        -:  622:    case great_hall:
        2:  623:      return 3;
        -:  624:    case minion:
        2:  625:      return 5;
        -:  626:    case steward:
        2:  627:      return 3;
        -:  628:    case tribute:
        2:  629:      return 5;
        -:  630:    case ambassador:
        2:  631:      return 3;
        -:  632:    case cutpurse:
        2:  633:      return 4;
        -:  634:    case embargo:
        2:  635:      return 2;
        -:  636:    case outpost:
        2:  637:      return 5;
        -:  638:    case salvager:
        2:  639:      return 4;
        -:  640:    case sea_hag:
        2:  641:      return 4;
        -:  642:    case treasure_map:
        2:  643:      return 4;
        -:  644:    }
        -:  645:
        4:  646:  return -1;
        -:  647:}
        -:  648:
function adventurerEffect called 2 returned 100% blocks executed 93%
        2:  649:int adventurerEffect(struct gameState *state, int currentPlayer)
        -:  650:{
        -:  651:	int cardDrawn;
        -:  652:	int temphand[MAX_HAND];
        2:  653:	int z = 0;
        2:  654:	int drawntreasure = 0;
        -:  655:
       10:  656:	while(drawntreasure<2){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6:  657:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  658:			shuffle(currentPlayer, state);
call    0 never executed
        -:  659:		}
        6:  660:		drawCard(currentPlayer, state);
call    0 returned 100%
        6:  661:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6:  662:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 60% (fallthrough)
branch  3 taken 40%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
        4:  663:			drawntreasure++;
        -:  664:		else{
        2:  665:			temphand[z]=cardDrawn;
        2:  666:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  667:			z++;
        -:  668:		}
        -:  669:	}
        6:  670:	while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  671:
        2:  672:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2:  673:		z-=1;
        -:  674:	}
        2:  675:	return 0;
        -:  676:}
        -:  677:
function smithyEffect called 1 returned 100% blocks executed 100%
        1:  678:int smithyEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  679:{
        -:  680:	//+3 Cards
        -:  681:
        -:  682:	int i;
        4:  683:	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  684:	{
        3:  685:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  686:	}
        -:  687:
        -:  688:	//discard card from hand
        1:  689:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  690:	return 0;
        -:  691:}
        -:  692:
function baronEffect called 0 returned 0% blocks executed 0%
    #####:  693:int baronEffect(struct gameState *state, int currentPlayer, int choice1)
        -:  694:{
    #####:  695:	state->numBuys++;//Increase buys by 1!
    #####:  696:	if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  697:		int p = 0;//Iterator for hand!
    #####:  698:		int card_not_discarded = 1;//Flag for discard set!
    #####:  699:		while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  700:			if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  701:				state->coins += 4;//Add 4 coins to the amount of coins
    #####:  702:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  703:				state->discardCount[currentPlayer]++;
    #####:  704:				for (; p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  705:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  706:				}
    #####:  707:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  708:				state->handCount[currentPlayer]--;
    #####:  709:				card_not_discarded = 0;//Exit the loop
        -:  710:			}
    #####:  711:			else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  712:				if(DEBUG) {
        -:  713:					printf("No estate cards in your hand, invalid choice\n");
        -:  714:					printf("Must gain an estate if there are any\n");
        -:  715:				}
    #####:  716:				if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  717:					gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  718:					state->supplyCount[estate]--;//Decrement estates
    #####:  719:					if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  720:						isGameOver(state);
call    0 never executed
        -:  721:					}
        -:  722:				}
    #####:  723:				card_not_discarded = 0;//Exit the loop
        -:  724:			}
        -:  725:
        -:  726:			else{
    #####:  727:				p--;//Next card
        -:  728:			}
        -:  729:		}
        -:  730:	}
        -:  731:
        -:  732:	else{
    #####:  733:		if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  734:			gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  735:			state->supplyCount[estate]--;//Decrement Estates
    #####:  736:			if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  737:				isGameOver(state);
call    0 never executed
        -:  738:			}
        -:  739:		}
        -:  740:	}
        -:  741:
    #####:  742:	return 0;
        -:  743:}
        -:  744:
function feastEffect called 0 returned 0% blocks executed 0%
    #####:  745:int feastEffect(struct gameState *state, int currentPlayer, int choice1)
        -:  746:{
        -:  747:	int i, x;
        -:  748:	int temphand[MAX_HAND];
        -:  749:
        -:  750:	//gain card with cost up to 5
        -:  751:	//Backup hand
    #####:  752:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  753:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  754:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  755:	}
        -:  756:	//Backup hand
        -:  757:
        -:  758:	//Update Coins for Buy
    #####:  759:	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  760:	x = 1;//Condition to loop on
    #####:  761:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  762:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  763:			if (DEBUG)
        -:  764:				printf("None of that card left, sorry!\n");
        -:  765:
        -:  766:			if (DEBUG){
        -:  767:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  768:			}
        -:  769:		}
    #####:  770:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  771:			printf("That card is too expensive!\n");
call    0 never executed
        -:  772:
        -:  773:			if (DEBUG){
        -:  774:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  775:			}
        -:  776:		}
        -:  777:		else{
        -:  778:
        -:  779:			if (DEBUG){
        -:  780:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  781:			}
        -:  782:
    #####:  783:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  784:			x = 0;//No more buying cards
        -:  785:
        -:  786:			if (DEBUG){
        -:  787:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  788:			}
        -:  789:		}
        -:  790:	}
        -:  791:
        -:  792:	//Reset Hand
    #####:  793:	for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  794:		state->hand[currentPlayer][i] = temphand[i];
    #####:  795:		temphand[i] = -1;
        -:  796:	}
        -:  797:	//Reset Hand
        -:  798:
    #####:  799:	return 0;
        -:  800:}
        -:  801:
        -:  802:
function councilRoomEffect called 1 returned 100% blocks executed 100%
        1:  803:int councilRoomEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  804:{
        -:  805:	int i;
        -:  806:	//+4 Cards
        5:  807:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  808:	{
        4:  809:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  810:	}
        -:  811:
        -:  812:	//+1 Buy
        1:  813:	state->numBuys++;
        -:  814:
        -:  815:	//Each other player draws a card
        3:  816:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  817:	{
        2:  818:		if ( i == currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  819:		{
        1:  820:			drawCard(i, state);
call    0 returned 100%
        -:  821:		}
        -:  822:	}
        -:  823:
        -:  824:	//put played card in played card pile
        1:  825:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  826:
        1:  827:	return 0;
        -:  828:}
        -:  829:
function cardEffect called 4 returned 100% blocks executed 5%
        4:  830:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  831:{
        -:  832:  int i;
        -:  833:  int j;
        -:  834:  int k;
        -:  835:  int index;
        4:  836:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  837:  int nextPlayer = currentPlayer + 1;
        4:  838:  int tributeRevealedCards[2] = {-1, -1};
        -:  839:  //int drawntreasure = 0;
        -:  840:
        4:  841:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  842:    nextPlayer = 0;
        -:  843:  }
        -:  844:
        -:  845:  //uses switch to select card and perform actions
        4:  846:  switch( card )
branch  0 taken 50%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  847:    {
        -:  848:    case adventurer:
        2:  849:      return adventurerEffect(state, currentPlayer);
call    0 returned 100%
        -:  850:
        -:  851:    case council_room:
        1:  852:    	return councilRoomEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  853:
        -:  854:    case feast:
    #####:  855:    	return feastEffect(state, currentPlayer, choice1);
call    0 never executed
        -:  856:
        -:  857:    case gardens:
    #####:  858:      return -1;
        -:  859:
        -:  860:    case mine:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:
        -:  883:      //discard trashed card
    #####:  884:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	{
    #####:  886:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  887:	    {
    #####:  888:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  889:	      break;
        -:  890:	    }
        -:  891:	}
        -:  892:
    #####:  893:      return 0;
        -:  894:
        -:  895:    case remodel:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:
    #####:  903:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  904:
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  907:
        -:  908:      //discard trashed card
    #####:  909:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  910:	{
    #####:  911:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  912:	    {
    #####:  913:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  914:	      break;
        -:  915:	    }
        -:  916:	}
        -:  917:
    #####:  918:      return 0;
        -:  919:
        -:  920:    case smithy:
        1:  921:      return smithyEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  922:
        -:  923:    case village:
        -:  924:      //+1 Card
    #####:  925:      drawCard(currentPlayer, state);
call    0 never executed
        -:  926:
        -:  927:      //+2 Actions
    #####:  928:      state->numActions = state->numActions + 2;
        -:  929:
        -:  930:      //discard played card from hand
    #####:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  932:      return 0;
        -:  933:
        -:  934:    case baron:
    #####:  935:      return baronEffect(state, currentPlayer, choice1);
call    0 never executed
        -:  936:
        -:  937:    case great_hall:
        -:  938:      //+1 Card
    #####:  939:      drawCard(currentPlayer, state);
call    0 never executed
        -:  940:
        -:  941:      //+1 Actions
    #####:  942:      state->numActions++;
        -:  943:
        -:  944:      //discard card from hand
    #####:  945:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  946:      return 0;
        -:  947:
        -:  948:    case minion:
        -:  949:      //+1 action
    #####:  950:      state->numActions++;
        -:  951:
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  954:
    #####:  955:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  956:	{
    #####:  957:	  state->coins = state->coins + 2;
        -:  958:	}
        -:  959:
    #####:  960:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  961:	{
        -:  962:	  //discard hand
    #####:  963:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  964:	    {
    #####:  965:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  966:	    }
        -:  967:
        -:  968:	  //draw 4
    #####:  969:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  970:	    {
    #####:  971:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  972:	    }
        -:  973:
        -:  974:	  //other players discard hand and redraw if hand size > 4
    #####:  975:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  978:		{
    #####:  979:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  980:		    {
        -:  981:		      //discard hand
    #####:  982:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  983:			{
    #####:  984:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  985:			}
        -:  986:
        -:  987:		      //draw 4
    #####:  988:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:			  drawCard(i, state);
call    0 never executed
        -:  991:			}
        -:  992:		    }
        -:  993:		}
        -:  994:	    }
        -:  995:
        -:  996:	}
    #####:  997:      return 0;
        -:  998:
        -:  999:    case steward:
    #####: 1000:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1001:	{
        -: 1002:	  //+2 cards
    #####: 1003:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1004:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1005:	}
    #####: 1006:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
        -: 1008:	  //+2 coins
    #####: 1009:	  state->coins = state->coins + 2;
        -: 1010:	}
        -: 1011:      else
        -: 1012:	{
        -: 1013:	  //trash 2 cards in hand
    #####: 1014:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1015:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1016:	}
        -: 1017:
        -: 1018:      //discard card from hand
    #####: 1019:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1020:      return 0;
        -: 1021:
        -: 1022:    case tribute:
    #####: 1023:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1024:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1025:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	  state->deckCount[nextPlayer]--;
        -: 1027:	}
    #####: 1028:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1030:	  state->discardCount[nextPlayer]--;
        -: 1031:	}
        -: 1032:	else{
        -: 1033:	  //No Card to Reveal
        -: 1034:	  if (DEBUG){
        -: 1035:	    printf("No cards to reveal\n");
        -: 1036:	  }
        -: 1037:	}
        -: 1038:      }
        -: 1039:
        -: 1040:      else{
    #####: 1041:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1042:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1043:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1044:	    state->deckCount[nextPlayer]++;
    #####: 1045:	    state->discard[nextPlayer][i] = -1;
    #####: 1046:	    state->discardCount[nextPlayer]--;
        -: 1047:	  }
        -: 1048:
    #####: 1049:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1050:	}
    #####: 1051:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
    #####: 1054:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1056:	state->deckCount[nextPlayer]--;
        -: 1057:      }
        -: 1058:
    #####: 1059:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1060:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1061:	state->playedCardCount++;
    #####: 1062:	tributeRevealedCards[1] = -1;
        -: 1063:      }
        -: 1064:
    #####: 1065:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1067:	  state->coins += 2;
        -: 1068:	}
        -: 1069:
    #####: 1070:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1071:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1072:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1073:	}
        -: 1074:	else{//Action Card
    #####: 1075:	  state->numActions = state->numActions + 2;
        -: 1076:	}
        -: 1077:      }
        -: 1078:
    #####: 1079:      return 0;
        -: 1080:
        -: 1081:    case ambassador:
    #####: 1082:      j = 0;		//used to check if player has enough cards to discard
        -: 1083:
    #####: 1084:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1085:	{
    #####: 1086:	  return -1;
        -: 1087:	}
        -: 1088:
    #####: 1089:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1090:	{
    #####: 1091:	  return -1;
        -: 1092:	}
        -: 1093:
    #####: 1094:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:	{
    #####: 1096:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1097:	    {
    #####: 1098:	      j++;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  return -1;
        -: 1104:	}
        -: 1105:
        -: 1106:      if (DEBUG)
        -: 1107:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1108:
        -: 1109:      //increase supply count for choosen card by amount being discarded
    #####: 1110:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1111:
        -: 1112:      //each other player gains a copy of revealed card
    #####: 1113:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1114:	{
    #####: 1115:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1116:	    {
    #####: 1117:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1118:	    }
        -: 1119:	}
        -: 1120:
        -: 1121:      //discard played card from hand
    #####: 1122:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1123:
        -: 1124:      //trash copies of cards returned to supply
    #####: 1125:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1126:	{
    #####: 1127:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1128:	    {
    #####: 1129:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1130:		{
    #####: 1131:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1132:		  break;
        -: 1133:		}
        -: 1134:	    }
        -: 1135:	}
        -: 1136:
    #####: 1137:      return 0;
        -: 1138:
        -: 1139:    case cutpurse:
        -: 1140:
    #####: 1141:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1142:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1145:	    {
    #####: 1146:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1147:		{
    #####: 1148:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1149:		    {
    #####: 1150:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1151:		      break;
        -: 1152:		    }
    #####: 1153:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1154:		    {
    #####: 1155:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1156:			{
        -: 1157:			  if (DEBUG)
        -: 1158:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1159:			}
    #####: 1160:		      break;
        -: 1161:		    }
        -: 1162:		}
        -: 1163:
        -: 1164:	    }
        -: 1165:
        -: 1166:	}
        -: 1167:
        -: 1168:      //discard played card from hand
    #####: 1169:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1170:
    #####: 1171:      return 0;
        -: 1172:
        -: 1173:
        -: 1174:    case embargo:
        -: 1175:      //+2 Coins
    #####: 1176:      state->coins = state->coins + 2;
        -: 1177:
        -: 1178:      //see if selected pile is in play
    #####: 1179:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1180:	{
    #####: 1181:	  return -1;
        -: 1182:	}
        -: 1183:
        -: 1184:      //add embargo token to selected supply pile
    #####: 1185:      state->embargoTokens[choice1]++;
        -: 1186:
        -: 1187:      //trash card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1189:      return 0;
        -: 1190:
        -: 1191:    case outpost:
        -: 1192:      //set outpost flag
    #####: 1193:      state->outpostPlayed++;
        -: 1194:
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1197:      return 0;
        -: 1198:
        -: 1199:    case salvager:
        -: 1200:      //+1 buy
    #####: 1201:      state->numBuys++;
        -: 1202:
    #####: 1203:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //gain coins equal to trashed card
    #####: 1206:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1207:	  //trash card
    #####: 1208:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1209:	}
        -: 1210:
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:    case sea_hag:
    #####: 1216:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1217:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1218:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:	  state->discardCount[i]++;
    #####: 1220:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1221:	}
        -: 1222:      }
    #####: 1223:      return 0;
        -: 1224:
        -: 1225:    case treasure_map:
        -: 1226:      //search hand for another treasure_map
    #####: 1227:      index = -1;
    #####: 1228:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1229:	{
    #####: 1230:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1231:	    {
    #####: 1232:	      index = i;
    #####: 1233:	      break;
        -: 1234:	    }
        -: 1235:	}
    #####: 1236:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
        -: 1238:	  //trash both treasure cards
    #####: 1239:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1240:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1241:
        -: 1242:	  //gain 4 Gold cards
    #####: 1243:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1244:	    {
    #####: 1245:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1246:	    }
        -: 1247:
        -: 1248:	  //return success
    #####: 1249:	  return 1;
        -: 1250:	}
        -: 1251:
        -: 1252:      //no second treasure_map found in hand
    #####: 1253:      return -1;
        -: 1254:    }
        -: 1255:
    #####: 1256:  return -1;
        -: 1257:}
        -: 1258:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:
        -: 1262:  //if card is not trashed, added to Played pile
        2: 1263:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1264:    {
        -: 1265:      //add card to played pile
        2: 1266:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1267:      state->playedCardCount++;
        -: 1268:    }
        -: 1269:
        -: 1270:  //set played card to -1
        2: 1271:  state->hand[currentPlayer][handPos] = -1;
        -: 1272:
        -: 1273:  //remove card from player's hand
        2: 1274:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        2: 1279:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1280:    {
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:  else
        -: 1285:    {
        -: 1286:      //replace discarded card with last card in hand
        2: 1287:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:      //set last card to -1
        2: 1289:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:      //reduce number of cards in hand
        2: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:
        2: 1294:  return 0;
        -: 1295:}
        -: 1296:
function gainCard called 4 returned 100% blocks executed 100%
        4: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:  //Note: supplyPos is enum of choosen card
        -: 1300:
        -: 1301:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1302:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        -: 1303:    {
        1: 1304:      return -1;
        -: 1305:    }
        -: 1306:
        -: 1307:  //added card for [whoseTurn] current player:
        -: 1308:  // toFlag = 0 : add to discard
        -: 1309:  // toFlag = 1 : add to deck
        -: 1310:  // toFlag = 2 : add to hand
        -: 1311:
        3: 1312:  if (toFlag == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1313:    {
        1: 1314:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1315:      state->deckCount[player]++;
        -: 1316:    }
        2: 1317:  else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1318:    {
        1: 1319:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1320:      state->handCount[player]++;
        -: 1321:    }
        -: 1322:  else
        -: 1323:    {
        1: 1324:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1325:      state->discardCount[player]++;
        -: 1326:    }
        -: 1327:
        -: 1328:  //decrease number in supply pile
        3: 1329:  state->supplyCount[supplyPos]--;
        -: 1330:
        3: 1331:  return 0;
        -: 1332:}
        -: 1333:
function updateCoins called 5 returned 100% blocks executed 100%
        5: 1334:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:{
        -: 1336:  int i;
        -: 1337:
        -: 1338:  //reset coin count
        5: 1339:  state->coins = 0;
        -: 1340:
        -: 1341:  //add coins for each Treasure card in player's hand
        9: 1342:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 44%
branch  1 taken 56% (fallthrough)
        -: 1343:    {
        4: 1344:      if (state->hand[player][i] == copper)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1345:	{
        1: 1346:	  state->coins += 1;
        -: 1347:	}
        3: 1348:      else if (state->hand[player][i] == silver)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1349:	{
        1: 1350:	  state->coins += 2;
        -: 1351:	}
        2: 1352:      else if (state->hand[player][i] == gold)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1353:	{
        1: 1354:	  state->coins += 3;
        -: 1355:	}
        -: 1356:    }
        -: 1357:
        -: 1358:  //add bonus
        5: 1359:  state->coins += bonus;
        -: 1360:
        5: 1361:  return 0;
        -: 1362:}
        -: 1363:
        -: 1364:
        -: 1365://end of dominion.c
        -: 1366:
